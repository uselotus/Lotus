# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Django/Postgres CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install pipenv
      uses: dschep/install-pipenv-action@v1
    - name: Cache Pipenv virtualenv
      uses: actions/cache@v1
      id: pipenv-cache
      with:
        path: ~/.pipenv
        key: ${{ runner.os }}-pipenv-v2-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-v2-
    - name: Install Dependencies
      env:
        PIPENV_NOSPIN: 'true'
        WORKON_HOME: ~/.pipenv/virtualenvs
        PIPENV_CACHE_DIR: ~/.pipenv/pipcache
      run: pipenv install --dev
      if: steps.pipenv-cache.outputs.cache-hit != 'true'
    - name: Run migrations
      env:
        PIPENV_NOSPIN: 'true'
        WORKON_HOME: ~/.pipenv/virtualenvs
        PIPENV_CACHE_DIR: ~/.pipenv/pipcache
      run: python manage.py migrate
    - name: Run tests
      env:
        PIPENV_NOSPIN: 'true'
        WORKON_HOME: ~/.pipenv/virtualenvs
        PIPENV_CACHE_DIR: ~/.pipenv/pipcache
      run: python manage.py test
    - name: Test with black
      env:
        PIPENV_NOSPIN: 'true'
        WORKON_HOME: ~/.pipenv/virtualenvs
        PIPENV_CACHE_DIR: ~/.pipenv/pipcache
      run: |
        python -m black --check .