# Generated by Django 4.0.5 on 2023-03-10 21:58

from decimal import Decimal

from django.db import migrations, models


def copy_invoice_line_item_base_to_amount(apps, schema_editor):
    InvoiceLineItem = apps.get_model("metering_billing", "InvoiceLineItem")
    for line_item in InvoiceLineItem.objects.all():
        line_item.amount = line_item.base
        line_item.save()


CREATE_TRIGGER_SQL = """
CREATE OR REPLACE FUNCTION update_invoice_line_item_amount()
RETURNS TRIGGER AS $$
DECLARE
    adjustment record;
BEGIN
    NEW.amount := NEW.base;
    FOR adjustment IN SELECT * FROM unnest(NEW.adjustments) AS adjustment LOOP
        NEW.amount := NEW.amount + (adjustment->>'amount')::decimal;
    END LOOP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_invoice_line_item_amount_trigger
BEFORE INSERT OR UPDATE ON metering_billing_invoicelineitem
FOR EACH ROW
EXECUTE FUNCTION update_invoice_line_item_amount();
"""


class Migration(migrations.Migration):
    dependencies = [
        ("metering_billing", "0205_rename_cost_due_historicalinvoice_amount_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="invoicelineitem",
            name="base",
            field=models.DecimalField(
                decimal_places=10,
                default=Decimal("0"),
                help_text="Base price of the line item. This is the price before any adjustments are applied.",
                max_digits=20,
            ),
        ),
        migrations.RunPython(copy_invoice_line_item_base_to_amount),
        migrations.RunSQL(CREATE_TRIGGER_SQL),
    ]
