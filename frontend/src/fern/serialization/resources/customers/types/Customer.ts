/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { LotusApi } from "../../../..";
import * as core from "../../../../core";

export const Customer: core.serialization.ObjectSchema<
  serializers.Customer.Raw,
  LotusApi.Customer
> = core.serialization.object({
  customerId: core.serialization.property(
    "customer_id",
    core.serialization.string()
  ),
  email: core.serialization.string(),
  customerName: core.serialization.property(
    "customer_name",
    core.serialization.string()
  ),
  invoices: core.serialization.list(
    core.serialization.lazyObject(
      async () => (await import("../../..")).LightweightInvoice
    )
  ),
  totalAmountDue: core.serialization.property(
    "total_amount_due",
    core.serialization.number()
  ),
  subscriptions: core.serialization.list(
    core.serialization.lazyObject(
      async () => (await import("../../..")).SubscriptionRecord
    )
  ),
  integration: core.serialization.lazyObject(
    async () => (await import("../../..")).CustomerIntegrations
  ),
  defaultCurrency: core.serialization.property(
    "default_currency",
    core.serialization.lazyObject(
      async () => (await import("../../..")).PricingUnit
    )
  ),
  paymentProvider: core.serialization.property(
    "payment_provider",
    core.serialization
      .lazy(async () => (await import("../../..")).PaymentProvider)
      .optional()
  ),
  hasPaymentMethod: core.serialization.property(
    "has_payment_method",
    core.serialization.boolean()
  ),
  address: core.serialization
    .lazyObject(async () => (await import("../../..")).Address)
    .optional(),
  taxRate: core.serialization.property("tax_rate", core.serialization.number()),
});

export declare namespace Customer {
  interface Raw {
    customer_id: string;
    email: string;
    customer_name: string;
    invoices: serializers.LightweightInvoice.Raw[];
    total_amount_due: number;
    subscriptions: serializers.SubscriptionRecord.Raw[];
    integration: serializers.CustomerIntegrations.Raw;
    default_currency: serializers.PricingUnit.Raw;
    payment_provider?: serializers.PaymentProvider.Raw | null;
    has_payment_method: boolean;
    address?: serializers.Address.Raw | null;
    tax_rate: number;
  }
}
