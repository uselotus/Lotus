/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { LotusApi } from "../../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
  interface Options {
    environment?: environments.LotusApiEnvironment | string;
    xApiKey?: core.Supplier<string>;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  /**
   * API endpoint that allows API Tokens to be viewed or edited.
   */
  public async list(): Promise<LotusApi.ApiToken[]> {
    const _response = await core.fetcher({
      url: urlJoin(
        this.options.environment ?? environments.LotusApiEnvironment.Cloud,
        "/api_tokens"
      ),
      method: "GET",
      headers: {
        "X-API-KEY": await core.Supplier.get(this.options.xApiKey),
      },
    });
    if (_response.ok) {
      return await serializers.apiTokens.list.Response.parse(
        _response.body as serializers.apiTokens.list.Response.Raw
      );
    }

    if (_response.error.reason === "status-code") {
      throw new errors.LotusApiError({
        statusCode: _response.error.statusCode,
        responseBody: _response.error.rawBody,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.LotusApiError({
          statusCode: _response.error.statusCode,
          responseBody: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.LotusApiTimeoutError();
      case "unknown":
        throw new errors.LotusApiError({
          message: _response.error.errorMessage,
        });
    }
  }
}
